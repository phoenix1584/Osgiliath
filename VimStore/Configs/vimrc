"
" .vimrc 
"
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'Valloric/YouCompleteMe'

filetype plugin indent on
set tabstop=4
set shiftwidth=4
set expandtab
set hlsearch
set showmode showcmd ic sw=4 ruler exrc
set shell=/bin/bash
set path=.,../include,../../include,/usr/include
"setlocal spell spelllang=en_us

set errorformat=%f:%l:\ %m

"set guifont=-adobe-courier-medium-r-normal-*-*-120-*-*-m-*-iso8859-1 
"set guifontset=-*-*-medium-r-normal--15-*-*-*-c-*-*-*

set autoindent

if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

augroup cprog
  " Remove all cprog autocommands
  au!

  " When starting to edit a file:
  "   For *.c and *.h files set formatting of comments and set C-indenting on-- Now off.
  "   For other files switch it off.
  "   Don't change the order, it's important that the line with * comes first.
  autocmd BufRead *       set formatoptions=tcql nocindent comments&
  autocmd BufRead *.c,*.h set formatoptions=croql nocindent noai comments=sr:/*,mb:*,el:*/,://
  autocmd BufRead *.java set formatoptions=croql nocindent noai comments=sr:/*,mb:*,el:*/,://
augroup END

" myfiletypefile 
augroup filetype 
    au! BufRead,BufNewFile *.dis so $VIM/vim63/syntax/cmix.vim 
augroup END

set mousehide
set mousefocus
set more

set incsearch

set ch=2

"Set TabSpace to 8
set ts=4
set shiftwidth=4

set tags=./tags,tags ",~/CodeBase/tags/tags,~/CodeBase/tags/tags_boost

let Tlist_Ctags_Cmd="/usr/local/bin/ctags" 

"map <C-Up> :cp<CR>
"map <C-Down> :cn<CR>
"map <C-Home> :cr<CR>
"map <C-Insert> :cl<CR>
"map <C-PageUp> :colder<CR>
"map <C-PageDown> :cnewer<CR>

map <F6> k_
map <F7> :q_
map <F8> :ts
map <F2> w
map <F3> W
map <F4> =
map <F5> _
map <Tab> gt
map <S-Tab> gT
map zm $a =strftime("/* CHANGES: %d-%b-%Y */")
map mi iprintf("%s:%u \n",__FILE__,__LINE__);F i 
map mo oprintf("%s:%u \n",__FILE__,__LINE__);F i 
map mO Oprintf("%s:%u \n",__FILE__,__LINE__);F i 
map ko oprintk("%s:%u \n",__FILE__,__LINE__);F i 
map kO Oprintk("%s:%u \n",__FILE__,__LINE__);F i 
" Map mc as comment & mv as uncomment
map mc :call Comm()j
map mv :call Uncomm()j
map GD G

map zr /\<printf\>dwxiXNMDBGPRINT(( XNOS_COMMWARE, XNOS_MSGINFO,/;i)zr
map zi iXNMDBGPRINT(( XNOS_COMMWARE, XNOS_MSGINFO, "%s:%u \n",__FILE__,__LINE__));F i 
map zo oXNMDBGPRINT(( XNOS_COMMWARE, XNOS_MSGINFO, "%s:%u \n",__FILE__,__LINE__));F i 
map zO OXNMDBGPRINT(( XNOS_COMMWARE, XNOS_MSGINFO, "%s:%u \n",__FILE__,__LINE__));F i 
map zc :set noignorecase
map zn :set ignorecase


function! Comm ()
	let cl=getline(".")
	let cl2="/* " .cl . " */" 
	call setline(".", cl2)
endfunction

function! Uncomm()
	let cl=getline(".")
	let cl2=substitute(cl, '/\*', "", "")
	call setline(".", cl2)
	let cl=getline(".")
	let cl2=substitute(cl, "*/", "", "")
	call setline(".", cl2)
	let cl=getline(".")
	let cl2=substitute(cl, "^ ", "", "")
	call setline(".", cl2)
endfunction

map <S-Insert> <MiddleMouse>
map! <S-Insert> <MiddleMouse>

"For the moment we don't need comment menus
let s:have_comment=1
if s:have_comment > 1
	"Menu items for Commenting and Un-Commenting code
	amenu 20.435 &Edit.-SEP4-			:
	amenu Edit.Comment `<:let fl=line(".")`>:let ll=line("."):call Comment(fl, ll)

	amenu Edit.UnComment `<:let fl=line(".")`>:let ll=line("."):call UnComment(fl, ll)

	"Function for commenting a block of Visually selected text
	function Comment(fl, ll)
	    let i=a:fl
		let comment="//"
		while i<=a:ll
		    let cl=getline(i)
			let cl2=comment.cl
			call setline(i, cl2)
			let i=i+1
		endwhile
	endfunction

	"Function for Un-Commenting a block of Visually selected text
	function UnComment(fl, ll)
	    let i=a:fl
		let comment="//"
		while i<=a:ll
		    let cl=getline(i)
			let cl2=substitute(cl, "//", "", "")
			call setline(i, cl2)
			let i=i+1
		endwhile
	endfunction
endif

highlight normal guifg=black guibg=grey
highlight visual guifg=lightred
highlight Search guibg=lightgreen
highlight Type guifg=darkgreen 
highlight Statement guifg=darkblue 
colorscheme koehler
"Set the DirDiff Excludes list
let DirDiffExcludes="*.o,tags,*.sw*,CVS,*.a,*.so,*.la"


filetype plugin on
"let do_syntax_sel_menu = 1|runtime! synmenu.vim|aunmenu &Syntax.&Show\ filetypes\ in\ menu
"cal SetSyn("c")

let g:ycm_global_ycm_extra_conf="./.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"
let g:ycm_key_list_select_completion=[]
let g:ycm_key_list_previous_completion=[]
let g:licenses_default_commands = ['gpl', 'mit', 'btest', 'header', 'allpermissive', 'pocoappsrc', 'mygit'] 
set bg=light
let g:rainbow_active = 0 "0 if you want to enable it later via :RainbowToggle
let g:rainbow_conf = {
\   'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
\   'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
\   'operators': '_,_',
\   'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
\   'separately': {
\       '*': {},
\       'tex': {
\           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
\       },
\       'lisp': {
\           'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
\       },
\       'vim': {
\           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
\       },
\       'html': {
\           'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
\       },
\       'css': 0,
\   }
\}

execute pathogen#infect()
call plug#begin('~/.vim/plugged')

" Make sure you use single quotes

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
Plug 'junegunn/vim-easy-align'

" Any valid git URL is allowed
Plug 'https://github.com/junegunn/vim-github-dashboard.git'

" Multiple Plug commands can be written in a single line using | separators
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" On-demand loading
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }

" Using a non-master branch
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }

" Using a tagged release; wildcard allowed (requires git 1.9.2 or above)
Plug 'fatih/vim-go', { 'tag': '*' }

" Plugin options
Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }

" Plugin outside ~/.vim/plugged with post-update hook
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

" Unmanaged plugin (manually installed and updated)
Plug '~/my-prototype-plugin'

" Initialize plugin system
call plug#end()
set magic
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0
"let g:syntastic_enable_perl_checker = 0
